package revision;

import java.io.*;
import java.math.BigDecimal;
import java.sql.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class RevisionArchivos6 {
    public static void main(String[] args) {
        long startTime = System.currentTimeMillis(); // Capturar el tiempo de inicio

        String url = "jdbc:teradata://10.40.176.8/DATABASE=prod_dwh_sgp,USER=jcrojas,PASSWORD=JulPipe06*";

        // Cargar el driver JDBC de Teradata
        try {
            Class.forName("com.teradata.jdbc.TeraDriver");
        } catch (ClassNotFoundException e) {
            System.out.println("Driver JDBC de Teradata no encontrado");
            e.printStackTrace();
            return;
        }

        // Leer documentos y cabeceras desde el archivo Excel
        List<String> documentos = new ArrayList<>();
        List<String> cabeceras = new ArrayList<>();
        Map<String, Integer> documentoRowMap = new HashMap<>();
        leerDocumentosDeExcel("D:\\OneDrive - Superfinanciera\\Pensiones\\Caxdac\\Skandia\\skandiaASfc2.xlsx", documentos, cabeceras, documentoRowMap);

        // Crear un libro de trabajo de Excel para los resultados
        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("Resultados");

        // Escribir las cabeceras en el archivo de salida
        Row headerRow = sheet.createRow(0);
        for (int i = 0; i < cabeceras.size(); i++) {
            headerRow.createCell(i).setCellValue(cabeceras.get(i));
        }

        // Establecer la conexión
        try (Connection connection = DriverManager.getConnection(url)) {
            if (connection != null) {
                System.out.println("Conectado a Teradata exitosamente");

                // Preparar la consulta SQL
                String query = "SELECT IDENTIFICACION, NOMBRES, APELLIDOS, CODIGO_ENTIDAD, DESC_CALIDAD_AFILPEN "
                        + "FROM afiliados_pensionados "
                        + "WHERE fecha_corte = '2024-08-31' AND TIPO_ENTIDAD = 23 AND CODIGO_ENTIDAD = 9 AND identificacion = ?";
                for (String documento : documentos) {
                    try (PreparedStatement pstmt = connection.prepareStatement(query)) {
                        pstmt.setString(1, documento);
                        ResultSet rs = pstmt.executeQuery();

                        // Procesar los resultados
                        while (rs.next()) {
                            if (documentoRowMap.containsKey(documento)) {
                                int rowNum = documentoRowMap.get(documento);
                                Row row = sheet.getRow(rowNum);
                                int lastCellNum = row.getLastCellNum();
                                row.createCell(lastCellNum++).setCellValue(rs.getString("IDENTIFICACION"));
                                row.createCell(lastCellNum++).setCellValue(rs.getString("NOMBRES"));
                                row.createCell(lastCellNum++).setCellValue(rs.getString("APELLIDOS"));
                                row.createCell(lastCellNum++).setCellValue(rs.getString("CODIGO_ENTIDAD"));
                                row.createCell(lastCellNum).setCellValue(rs.getString("DESC_CALIDAD_AFILPEN"));
                            }
                        }
                    }
                }
            }
        } catch (SQLException e) {
            System.out.println("Error al conectarse a Teradata");
            e.printStackTrace();
        } finally {
            // Guardar el archivo Excel
            try (FileOutputStream out = new FileOutputStream(new File("D:\\OneDrive - Superfinanciera\\Pensiones\\Caxdac\\Skandia\\Resultados.xlsx"))) {
                workbook.write(out);
                workbook.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
            long endTime = System.currentTimeMillis(); // Capturar el tiempo de finalización
            long duration = endTime - startTime; // Calcular la duración
            System.out.println("Ejecución finalizada.");
            // Convertir la duración de milisegundos a horas, minutos y segundos
            long segundos = (duration / 1000) % 60;
            long minutos = (duration / (1000 * 60)) % 60;
            long horas = (duration / (1000 * 60 * 60)) % 24;

            String tiempoFormateado = String.format("%02d horas, %02d minutos, %02d segundos", horas, minutos, segundos);
            System.out.println("Duración del proceso: " + tiempoFormateado);
        }
    }

    public static void leerDocumentosDeExcel(String filePath, List<String> documentos, List<String> cabeceras, Map<String, Integer> documentoRowMap) {
        try (FileInputStream file = new FileInputStream(new File(filePath));
                Workbook workbook = new XSSFWorkbook(file)) {
            Sheet sheet = workbook.getSheetAt(0);
            Row firstRow = sheet.getRow(0);
            for (Cell cell : firstRow) {
                cabeceras.add(cell.getStringCellValue());
            }
            for (Row row : sheet) {
                if (row.getRowNum() < 1) {
                    continue; // Salta la primera fila (encabezado)
                }
                Cell cell = row.getCell(1); // Asume que los documentos están en la columna 2
                if (cell != null) {
                    String documento = "";
                    switch (cell.getCellType()) {
                        case STRING:
                            documento = cell.getStringCellValue();
                            documentos.add(documento);
                            break;
                        case NUMERIC:
                            documento = new BigDecimal(cell.getNumericCellValue()).toPlainString();
                            documentos.add(documento);
                            break;
                        default:
                            break;
                    }
                    documentoRowMap.put(documento, row.getRowNum());
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}